import "./index.less";
import Vue from "vue";
import Utils from "@nat/heibao-utils";
import IosSelect from "@nat/iosselect";
import {
  Component,
  Emit,
  Inject,
  Model,
  Prop,
  Provide,
  Watch
} from 'vue-property-decorator';
import { IosSelectDate } from "./IosSelectDateModel";
@Component({
  template: require("./index.html")
})
export default class IOSSelectDate extends Vue {

  /**
   * 设置每月对应的天数
   */
  private monthDays: any = {
    1: 31,
    2: 28,
    3: 31,
    4: 30,
    5: 31,
    6: 30,
    7: 31,
    8: 31,
    9: 30,
    10: 31,
    11: 30,
    12: 31
  };

  /**
   * 组件初始化可选项对象
   */
  @Prop()
  iosSelectOpts: any = {
    config: {

    },
    initDate: {
      currentDate: "",
      beginDate: "",
      endDate: "",
      day: "",
      dayType: ""
    }
  };

  /**
   * iosselect默认配置
   */
  private defaultConf: any = {
    container: 'container',// 容器class
    title: '',// 标题
    itemHeight: 40,// 每个元素的高度
    itemShowCount: 4,// 每一列显示元素个数，超出将隐藏
    level: 2,//默认是两级
    oneLevelId: 0,// 第一级默认值,
    twoLevelId: 0,//第二级默认值
    threeLevelId: 0,//第三级默认值
    callback: this.selectDateOk
  }

  /**
   * iosselect组件容器
   */
  private get iosselectDateContainer() {
    // @ts-ignore
    return this.defaultConf.container;
  }

  mounted(): void {
    this.initialIosSelectDate(this.iosSelectOpts);
  }

  /**
   * 初始化年数据
   * @param {IosSelectDate} dateModel 初始化日期对象
   */
  yearData(dateModel: IosSelectDate): Function {
    return function (callback) {
      let yearData: Array<any> = [];
      let diffYears: number = Utils.diffDate("y", dateModel.beginDate, dateModel.endDate);
      let currentYear = dateModel.beginDate.getFullYear();
      for (let i = 0; i <= diffYears; i++) {
        let tempYear = currentYear;
        tempYear += i;
        yearData.push({
          id: tempYear,
          value: `${tempYear}年`
        });
      }
      callback(yearData);
    }
  }

  /**
   * 初始化月份数据
   * @param {IosSelectDate} dateModel 初始化日期对象
   */
  monthData(dateModel: IosSelectDate): Function {
    return function (year, callback) {
      let monthData: Array<any> = [];
      let cycleBeginIndex = 1;
      let cycleEndIndex = 12;
      if (Utils.dateFormat("yyyy", dateModel.beginDate) == year.toString()) {
        cycleBeginIndex = dateModel.beginDate.getMonth() + 1;
      } else if (Utils.dateFormat("yyyy", dateModel.endDate) == year.toString()) {
        cycleEndIndex = dateModel.endDate.getMonth() + 1;
      }
      for (let i = cycleBeginIndex; i <= cycleEndIndex; i++) {
        monthData.push({
          id: i,
          value: `${i}月`
        });
      }
      callback(monthData);
    }
  }

  /**
   * 初始化月份数据
   * @param {IosSelectDate} dateModel 初始化日期对象
   */
  dateData(dateModel: IosSelectDate): Function {
    let _this = this;
    return function (year, month, callback) {
      let date = new Date(year, month - 1, 1);
      let dayData: Array<any> = [];
      //判断闰年跟平年
      if (month == 2 && Utils.isLeapYear(date)) {
        _this.monthDays[2] = 29;
      } else {
        _this.monthDays[2] = 28;
      }
      let days = _this.monthDays[month];
      let cycleBeginIndex = 1;
      let cycleEndIndex = days;
      if (Utils.dateFormat("yyyy-MM", dateModel.beginDate) == Utils.dateFormat("yyyy-MM", date)) {
        cycleBeginIndex = dateModel.beginDate.getDate();
      } else if (Utils.dateFormat("yyyy-MM", dateModel.endDate) == Utils.dateFormat("yyyy-MM", date)) {
        cycleEndIndex = dateModel.endDate.getDate();
      }
      for (let i = cycleBeginIndex; i <= cycleEndIndex; i++) {
        dayData.push({
          id: i,
          value: `${i}日`
        });
      }
      callback(dayData);
    }
  }

  /**
   * 初始化iosselectdate
   * @param {IosSelectDate} dateModel 初始组件数据实体
   * @param {any} config 初始化组件配置
   */
  initIosSelectDate(dateModel: IosSelectDate, config: any): void {
    if (config.level == 2) {//两级，只有年、月
      config.relation = [1];
      let iosSelect = new IosSelect(2, [
        this.yearData(dateModel),
        this.monthData(dateModel)
      ], config);
    }
    if (config.level == 3) {//三级，有年、月、日
      config.relation = [1, 1];
      let iosSelect = new IosSelect(3, [
        this.yearData(dateModel),
        this.monthData(dateModel),
        this.dateData(dateModel)
      ], config);
    }
    this.iosSelectOpts.initDate.currentDate = "";
  }

  /**
   * 初始化iosselct
   * @param initData 初始化的数据
   */
  initialIosSelectDate(initData): void {
    let initDate = initData.initDate, config = initData.config;
    if (initDate.beginDate && initDate.endDate && initDate.currentDate) {
      let initDateModel: IosSelectDate = new IosSelectDate();
      initDateModel.beginDate = Utils.createCorrectDate(initDate.beginDate);
      initDateModel.endDate = Utils.createCorrectDate(initDate.endDate);
      initDateModel.currentDate = Utils.createCorrectDate(initDate.currentDate);
      config = config || {};
      //先进行config跟defaultConf的合并操作
      this.defaultConf = Object.assign({}, this.defaultConf, config);
      if (this.defaultConf.level == 3) {//三级，设置年、月、日默认值
        this.defaultConf.oneLevelId = initDateModel.currentDate.getFullYear();
        this.defaultConf.twoLevelId = Number(Utils.dateFormat("M", initDateModel.currentDate));
        this.defaultConf.threeLevelId = Number(Utils.dateFormat("d", initDateModel.currentDate));
      }
      if (this.defaultConf.level == 2) {//二级，设置年、月默认值
        this.defaultConf.oneLevelId = initDateModel.currentDate.getFullYear();
        this.defaultConf.twoLevelId = Number(Utils.dateFormat("M", initDateModel.currentDate));
      }

      this.initIosSelectDate(initDateModel, this.defaultConf);
    }
  }

  /**
   * 监听iosSelectOpts可选项变化
   * @param newVal 变化的值
   * @param oldVal 原来旧的值
   */
  @Watch("iosSelectOpts", { deep: true })
  watchIosSelectOptsChange(newVal, oldVal): void {
    if (newVal.initDate.currentDate)
      this.initialIosSelectDate(newVal);
  }

  /**
   * 选择时间以后触发的事件，iosselect最多支持6级，todo:该组件后续优化让支持6级的时间选择
   * @param yearData 选择的年数据
   * @param monthData 选择的月数据
   * @param dayData 选择的天数据
   * @param hourDay 选择的小时数据
   * @param minuteData 选择的分数据
   * @param secondData 选择的秒数据
   */
  @Emit("selectedEvent")
  selectDateOk(yearData, monthData, dayData, hourDay, minuteData, secondData): void {

  }
}