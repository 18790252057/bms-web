import "./index.less";
import '../../../../node_modules/swiper/dist/css/swiper.min.css';
import Utils from "@nat/heibao-utils";
import Vue from "vue";
import VueAwesomeSwiper from 'vue-awesome-swiper/dist/ssr';
import {
  Component,
  Emit,
  Inject,
  Model,
  Prop,
  Provide,
  Watch
} from 'vue-property-decorator';
import { CalenderModule } from "./CalenderModel";
import { isRegExp } from "util";
// @ts-ignore
Vue.use(VueAwesomeSwiper);

@Component({
  template: require("./index.html")
})
export default class CalendarWeek extends Vue {


  /**
   * 设置每月对应的天数
   */
  private monthDays: object = {
    1: 31,
    2: 28,
    3: 31,
    4: 30,
    5: 31,
    6: 30,
    7: 31,
    8: 31,
    9: 30,
    10: 31,
    11: 30,
    12: 31
  };

  /**
   * 天的swiper对象
   */
  private daySwiper: any;

  /**
   * 天 swiper options
   */
  private daySwiperOption: any = {
    loop: false,
    slidesPerView: 1,
    initialSlide: 1,
    observer: true,
    observeParents: true
  }
  /**
   * 定义日历组件接收的options可选项
   */
  @Prop()
  private weekCalendarOpts: CalenderModule.CalenderOptions;

  //日历组件可选项
  private calendarOption: CalenderModule.CalenderOptions;

  /**
   * 多少个月日历
   */
  private weekCalender: CalenderModule.MonthCalender = new CalenderModule.MonthCalender();

  /**
   * 选择日历某天的相关记录数据实体
   */
  private calenderChoosedModel: CalenderModule.CalenderChoosed = new CalenderModule.CalenderChoosed();

  /**
   * 用于记录日历月份的数据，判断到底是否应该生成新的日历
   */
  private daySwiperIncludes: Array<string> = new Array<string>();


  /**
   * 初始化周日历组件
   * @param initCalenderData 初始化周日历组件的数据
   */
  initialWeekCalender(initCalenderData: any) {
    //重置原来渲染的所有数据
    this.daySwiperIncludes = new Array<string>();
    //清空原来的日历数据
    this.weekCalender.WeekDayList.length = 0;
    //清空选择项
    this.calenderChoosedModel = new CalenderModule.CalenderChoosed();
    //重置daySwiper的索引
    this.daySwiper.activeIndex = 1;
    this.daySwiper.realIndex = 1;

    let calendarOption: CalenderModule.CalenderOptions = new CalenderModule.CalenderOptions();
    calendarOption.beginDate = Utils.createCorrectDate(initCalenderData.beginDate);
    calendarOption.endDate = Utils.createCorrectDate(initCalenderData.endDate);
    calendarOption.currentDate = Utils.createCorrectDate(initCalenderData.currentDate);
    calendarOption.title = initCalenderData.title;
    calendarOption.isAjax = <boolean>initCalenderData.isAjax;
    calendarOption.initDay = initCalenderData.initDay;
    //初始化日历可选项
    this.calendarOption = calendarOption;
    this.initCalender(calendarOption);
  }


  /**
   * vue模板编译完以后处理的逻辑(即dom已经生成)
   */
  mounted(): void {
    this.registerEvents();
  }

  /**
   * 初始化日历状态
   * @param calenderDayStatus 要变更的日期状态的数组
   */
  calenderDayStatusExchange(calenderDayStatus) {
    let defaultDay = Utils.dateFormat("yyyy-MM-dd", this.calendarOption.currentDate);
    let today = Utils.dateFormat("yyyy-MM-dd", new Date());
    for (let item of calenderDayStatus) {
      for (let item1 of this.weekCalender.WeekDayList) {
        for (let item2 of item1.dayList) {
          if (item2.currentDay == item.currentDay) {
            item2.dayDesc = item.dayDesc;
            item2.oriDayDesc = item.dayDesc;
            item2.dayClass = item.dayClass;
            item2.oriDayClass = item.dayClass;
            if (defaultDay == item2.currentDay) {
              if (!item.dayClass)
                item2.dayClass = "day current";
              else {
                item2.dayClass = `day current ${item.dayClass}`;
                item2.oriDayClass = item.dayClass;
              }
            }
          }
        }
      }
    }
  }


  /**
   * 渲染日历视图
   * @param {Date} date 日期对象
   * @param {boolean} isRight 是否往右边增加一个月份的日历，true为往右边增加，false为往左边增加，默认为true
   */
  private renderCalenderView(date: Date, isRight: boolean = true): void {
    //初始化周日历列表对象
    let weekList: CalenderModule.WeekDayList = new CalenderModule.WeekDayList();

    //当前是周几
    let weekDay = date.getDay();
    //从周日到今天相差几天
    let diffBeginDay: number = weekDay - 0;
    let beginDate: Date = Utils.copyDate(date);
    beginDate.setDate(beginDate.getDate() - diffBeginDay);
    //当前日期
    let today: string = Utils.dateFormat("yyyy-MM-dd", new Date());
    let defaultDay: string = Utils.dateFormat("yyyy-MM-dd", this.calendarOption.currentDate);
    for (let i = 0; i <= 6; i++) {
      let tempDate1: Date = Utils.copyDate(beginDate);
      tempDate1.setDate(tempDate1.getDate() + i);
      //判断是否已经超过最大日期，如果已经超过最大日期，则生成空的元素
      if (tempDate1 <= this.calendarOption.endDate) {
        let dayModel: CalenderModule.DayModel = new CalenderModule.DayModel();
        dayModel.currentDay = Utils.dateFormat("yyyy-MM-dd", tempDate1);
        dayModel.day = tempDate1.getDate();
        dayModel.dayDesc = tempDate1.getDate().toString();
        dayModel.oriDayDesc = dayModel.dayDesc;

        if (today == dayModel.currentDay && today == defaultDay) {
          dayModel.dayDesc = "今";
          dayModel.oriDayDesc = dayModel.dayDesc;
          dayModel.dayClass = "day current";
          dayModel.oriDayClass = "day no-today";
        } else if (today == dayModel.currentDay && defaultDay != today) {
          dayModel.dayDesc = "今";
          dayModel.oriDayDesc = dayModel.dayDesc;
          dayModel.dayClass = "day no-today";
          dayModel.oriDayClass = "day no-today";
        } else if (defaultDay == dayModel.currentDay) {
          dayModel.dayClass = "day current";
        }
        weekList.dayList.push(dayModel);
      } else {
        let dayModel: CalenderModule.DayModel = new CalenderModule.DayModel();
        weekList.dayList.push(dayModel);
      }
    }
    if (isRight)
      this.weekCalender.WeekDayList.push(weekList);
    else {
      this.weekCalender.WeekDayList.unshift(weekList);
    }
  }

  /**
   * 初始化日历视图数据 初始化渲染三个月的日历，当前月，上一个月，下一个月
   * @param  {CalenderModule.CalenderOptions} calenderOption 日历初始化选项
   */
  initCalender(calendarOption: CalenderModule.CalenderOptions): void {
    //初始化日历选择操作的实体
    this.calenderChoosedModel.beginDate = Utils.dateFormat("yyyy-MM-dd", calendarOption.beginDate);
    this.calenderChoosedModel.endDate = Utils.dateFormat("yyyy-MM-dd", calendarOption.endDate);
    this.calenderChoosedModel.currentDate = Utils.dateFormat("yyyy-MM-dd", calendarOption.currentDate);

    let currentDate: Date = Utils.copyDate(calendarOption.currentDate);

    //渲染上一周
    let tempDate: Date = Utils.copyDate(calendarOption.currentDate);
    tempDate.setDate(tempDate.getDate() - 7);
    this.renderCalenderView(tempDate);

    //渲染当前周
    this.renderCalenderView(currentDate);

    //渲染下一周
    tempDate = Utils.copyDate(calendarOption.currentDate);
    tempDate.setDate(tempDate.getDate() + 7);
    this.renderCalenderView(tempDate);
  }

  /**
   * 注册相关事件
   */
  registerEvents(): void {
    const _this = this;

    this.$parent.$on("initialCalenderWeekEvent", function (initCalenderData) {
      _this.initialWeekCalender(initCalenderData);
    });

    this.$parent.$on("initWeekCalenderDayStatusEvent", function (calenderDayStatus) {
      _this.calenderDayStatusExchange(calenderDayStatus)
    });

    //往左边切换天容器，生成slider块
    this.daySwiper.on("slidePrevTransitionEnd", function () {

      //重置前一周的状态
      let currentMonthDateStr = this.slides.eq(this.activeIndex).find(".item").attr("data-month");
      let chooseDate: Date = null;
      for (let item of _this.weekCalender.WeekDayList) {
        for (let item1 of item.dayList) {
          if (item1.dayClass.indexOf("current") > -1) {//取出选中的一天
            chooseDate = Utils.createCorrectDate(item1.currentDay);
          }
          item1.status = item1.oriStatus;
          item1.bgColor = item1.oriBgColor;
          item1.dayDesc = item1.oriDayDesc;
          item1.fontColor = item1.oriFontColor;
          item1.dayClass = item1.oriDayClass;
        }
      }

      /*******************提前渲染上一周的日历 begin*****************/
      let currentDate: Date = Utils.createCorrectDate(currentMonthDateStr);
      let beginDate: Date = _this.calendarOption.beginDate;
      if (currentDate > beginDate) {
        currentDate.setDate(currentDate.getDate() - 7);
        let dateStr = Utils.dateFormat("yyyy-MM-dd", currentDate);
        if (!_this.daySwiperIncludes.includes(dateStr)) {
          _this.renderCalenderView(currentDate, false);
          _this.daySwiperIncludes.push(dateStr);

          this.activeIndex = this.activeIndex + 1;
          this.realIndex = this.realIndex + 1;

          _this.swipeWeekCalenderSlideHandle(currentDate, false);
        }
      }

      /*******************提前渲染上一周的日历 end*****************/

      //默认显示的日期，如果是最后一周，则显示最后一周第一天，
      //如果是最前一周，则显示最前一周最后一天
      //否则，原来选的是周几，则显示周几
      chooseDate.setDate(chooseDate.getDate() - 7);
      let chooseDay: string = null;
      for (let item of _this.weekCalender.WeekDayList) {
        for (let item1 of item.dayList) {
          if (chooseDate >= beginDate) {
            chooseDay = Utils.dateFormat("yyyy-MM-dd", chooseDate);
          } else {
            chooseDay = Utils.dateFormat("yyyy-MM-dd", beginDate);
          }
          if (item1.currentDay != chooseDay) continue;
          item1.dayClass = "day current";
          _this.chooseDayHandle(item1.currentDay, null);
          break;
        }
      }
    });

    //往右边切换天容器，生成slider块
    this.daySwiper.on("slideNextTransitionEnd", function () {
      let currentMonthDateStr = this.slides.eq(this.activeIndex).find(".item").attr("data-month");
      let chooseDate: Date = null;
      for (let item of _this.weekCalender.WeekDayList) {
        for (let item1 of item.dayList) {
          if (item1.dayClass.indexOf("current") > -1) {//取出选中的一天
            chooseDate = Utils.createCorrectDate(item1.currentDay);
          }
          item1.status = item1.oriStatus;
          item1.bgColor = item1.oriBgColor;
          item1.dayDesc = item1.oriDayDesc;
          item1.fontColor = item1.oriFontColor;
          item1.dayClass = item1.oriDayClass;
        }
      }

      /*******************提前渲染下一周的日历 begin*****************/
      let currentDate: Date = Utils.createCorrectDate(currentMonthDateStr);
      let endDate: Date = _this.calendarOption.endDate;
      currentDate.setDate(currentDate.getDate() + 7);

      if (currentDate < endDate) {
        let dateStr = Utils.dateFormat("yyyy-MM-dd", currentDate);
        if (!_this.daySwiperIncludes.includes(dateStr)) {
          _this.renderCalenderView(currentDate);
          _this.daySwiperIncludes.push(dateStr);

          _this.swipeWeekCalenderSlideHandle(currentDate, true);
        }
      }

      /*******************提前渲染下一周的日历 end*****************/

      //默认显示的日期，如果是最后一周，则显示最后一周第一天，
      //如果是最前一周，则显示最前一周最后一天
      //否则，原来选的是周几，则显示周几
      chooseDate.setDate(chooseDate.getDate() + 7);
      let chooseDay: string = null;
      for (let item of _this.weekCalender.WeekDayList) {
        for (let item1 of item.dayList) {
          if (chooseDate <= endDate) {
            chooseDay = Utils.dateFormat("yyyy-MM-dd", chooseDate);
          } else {
            chooseDay = Utils.dateFormat("yyyy-MM-dd", endDate);
          }
          if (item1.currentDay != chooseDay) continue;
          item1.dayClass = "day current";
          _this.chooseDayHandle(item1.currentDay, null);
          break;
        }
      }
    });
  }

  /**
   * 日历组件滑动的时候通知事件，让组件调用者重置日历状态
   * @param date 日期
   * @param isNext 是否渲染下下周日期，默认为true，false为渲染上上周日期
   */
  @Emit("swipeWeekCalenderSlideEvent")
  swipeWeekCalenderSlideHandle(date: Date, isNext = true) {

  }

  /**
   * 选择具体的日期
   * @param currentDay 当前月份，精确到天：2018-01-01
   * @param event 点击事件
   */
  @Emit("chooseWeekDayItemEvent")
  private chooseDayHandle(currentDay: string, event: any): any {
    if (!event) return true;
    let _this = this;
    //把选中的时间日期赋值给calenderChoosedModel，发送给外部调用者
    for (let item of this.weekCalender.WeekDayList) {
      for (let item1 of item.dayList) {
        if (item1.currentDay == currentDay) {//当前日期，则变更状态
          item1.dayClass = "day current";
          if (item1.oriDayClass) item1.dayClass = `day current ${item1.oriDayClass}`;
        } else {//不是当前日期，则重置状态
          item1.dayDesc = item1.oriDayDesc;
          item1.dayClass = item1.oriDayClass;
        }
      }
    }
  }
}