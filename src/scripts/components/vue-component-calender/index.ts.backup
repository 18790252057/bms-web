import "./index.less";
import '../../../../node_modules/swiper/dist/css/swiper.min.css';
import Utils from "@nat/heibao-utils";
import Vue from "vue";
import VueAwesomeSwiper from 'vue-awesome-swiper/dist/ssr';
import IosSelectDate from "../vue-component-iosdateselect/index";

import {
  Component,
  Emit,
  Inject,
  Model,
  Prop,
  Provide,
  Watch
} from 'vue-property-decorator';
import { CalenderModule } from "./CalenderModel";
import { setInterval, clearInterval } from "timers";
import { watch } from "fs";

// @ts-ignore
Vue.use(VueAwesomeSwiper);

@Component({
  template: require("./index.html"),
  components: {
    IosSelectDate
  }
})
export default class Calender extends Vue {

  /**
   * iosselect组件切换变量
   */
  iosSelectComponent: string = "IosSelectDate";

  /**
   * 日期元素的高度
   */
  private dayEleHeight: number = 0;
  /**
   * 日期元素距离父容器的距离
   */
  private dayEleOffsetTop: number = 0;

  /**
   * 日期元素距离屏幕距离
   */
  private dayEleboundTop: number = 0;

  /**
   * 日历容器元素距离父容器的距离
   */
  private calenderWrapperEleOffsetTop: number = 0;

  /**
   * 日历容器初始化样式
   */
  private calenderWrapperStyle: any = {
    transform: "translateY(0px)",
    "-webkit-transform": "translateY(0px)"
  };

  /**
   * 开始折叠日历组件的标识
   */
  @Prop()
  isStartCollapse: boolean = false;
  /**
   * 监听折叠日历组件的标志
   * @param newVal 新值
   * @param oldVal 旧值
   */
  //@Watch("isStartCollapse")
  watchstartCollapse(newVal, oldVal) {
    if (newVal == true) this.isStartCollapse = false;
    this.calenderWrapperStyle.transform = "translateY(0px)";
    this.calenderWrapperStyle["-webkit-transform"] = "translateY(0px)";

    //获取当前元素的距离上边的高度
    // @ts-ignore
    this.calenderWrapperEleOffsetTop = this.$refs.calenderDayWrapper.getBoundingClientRect().top; //this.$refs.calenderDayWrapper.offsetTop;
    this.dayItemContainerOffsetTop.calenderDayWrapperTop = this.calenderWrapperEleOffsetTop;
    for (let item of this.monthCalender.monthCalenderList) {
      for (let item1 of item.dayList) {
        //@ts-ignore
        if (item1.dayClass.indexOf("current") > -1) {
          this.dayEleOffsetTop = this.$refs[item1.currentDay][0].offsetTop;
          this.dayItemContainerOffsetTop.offsetTop = this.dayEleOffsetTop;
          this.dayEleHeight = this.$refs[item1.currentDay][0].offsetHeight;
          this.dayItemContainerOffsetTop.height = this.dayEleHeight;

          this.dayEleboundTop = this.$refs[item1.currentDay][0].getBoundingClientRect().top;
          break;
        }
      }
    }
  }

  /**
   * 外部组件滑动距离
   */
  @Prop()
  private collapseY: number = 0;
  /**
   * 监听外部组件滑动距离，实时折叠日历组件
   * @param newVal 新值
   * @param oldVal 旧值
   */
  @Watch("collapseY")
  watchCollapseY(newVal, oldVal) {
    if (newVal <= this.dayEleOffsetTop) {
      this.calenderWrapperStyle.transform = `translateY(${newVal * -1}px)`;
      this.calenderWrapperStyle["-webkit-transform"] = `translateY(${newVal * -1}px)`;
    } else {
      this.calenderWrapperStyle.transform = `translateY(${(this.dayEleOffsetTop) * -1}px)`;
      this.calenderWrapperStyle["-webkit-transform"] = `translateY(${(this.dayEleOffsetTop) * -1}px,-1px)`;
      //折叠完成，通知组件调用者
      this.collapseOffset(this.dayEleOffsetTop, true, this.dayEleHeight, this.dayEleOffsetTop, this.dayEleboundTop, this.calenderWrapperEleOffsetTop);
    }
  }

  /**
   * 设置每月对应的天数
   */
  private monthDays: object = {
    1: 31,
    2: 28,
    3: 31,
    4: 30,
    5: 31,
    6: 30,
    7: 31,
    8: 31,
    9: 30,
    10: 31,
    11: 30,
    12: 31
  }

  /**
   * 选择了某一天日期后，日期容器距离屏幕高度等对象
   */
  private dayItemContainerOffsetTop: any = {
    calenderDayWrapperTop: 0,
    monthHeight: 0,
    weekHeight: 0,
    top: 0,
    offsetTop: 0,
    height: 0
  };

  /**
   * 定义日历组件接收的options可选项属性
   */
  @Prop()
  private calendarOpts: any;

  /**
   * 日历组件折叠发方向，top或者bottom
   */
  @Prop()
  private direction: string;

  /**
   * 变更日历组件每天的状态
   */
  @Prop()
  private calenderDayStatus: any = null;

  /**
   * 今天的日期
   */
  private today: string = Utils.dateFormat("yyyy-MM-dd", new Date());

  /**
   * 当前月第一天日期
   */
  private todayMonth: string = Utils.dateFormat("yyyy-MM", new Date()) + "-01";

  /**
   * 变更日历的状态
   * @param calenderDayStatus 每天日期的状态
   */
  calenderDayStatusExchange(calenderDayStatus) {
    this.calenderDayStatus = calenderDayStatus;
    //今天
    let today = this.today;
    //默认天
    let defaultDay = Utils.dateFormat("yyyy-MM-dd", this.calendarOption.currentDate);
    let swiperMonth = this.swiperMonthDate ? Utils.dateFormat("yyyy-MM", this.swiperMonthDate) : null;
    for (let item of this.calenderDayStatus) {
      let month = Utils.dateFormat("yyyy-MM", Utils.createCorrectDate(item.currentDay));
      if (swiperMonth && month != swiperMonth) continue;
      for (let item1 of this.monthCalender.monthCalenderList) {
        let month1 = Utils.dateFormat("yyyy-MM", Utils.createCorrectDate(item1.currentMonth));
        if (month == month1) {
          for (let item2 of item1.dayList) {
            if (item2.currentDay == item.currentDay) {
              item2.dayDesc = item.dayDesc;
              item2.oriDayDesc = item.dayDesc;
              item2.dayClass = item.dayClass;
              item2.oriDayClass = item.dayClass;


              if (today == item2.currentDay && defaultDay == today) {
                item2.dayDesc = "今";
                item2.oriDayDesc = item2.dayDesc;
                item2.dayClass = "day current";
                item2.oriDayClass = "day no-today";
              } else if (today == item2.currentDay && defaultDay != today) {
                item2.dayDesc = "今";
                item2.oriDayDesc = item2.dayDesc;
                item2.dayClass = "day no-today";
                item2.oriDayClass = "day no-today";
              } else if (defaultDay == item2.currentDay) {
                let regExp = /[\u4E00-\u9FA5]/g;
                if (regExp.test(item2.dayDesc) && item2.dayDesc.length == 2) {
                  item2.dayDesc = item2.dayDesc.substring(0, 1);
                }
                if (!item.dayClass)
                  item2.dayClass = "day current";
                else {
                  item2.dayClass = `day current ${item.dayClass}`;
                  item2.oriDayClass = item.dayClass;
                }
              }

              /* if (defaultDay == item2.currentDay) {
                if (!item.dayClass)
                  item2.dayClass = "day current";
                else {
                  item2.dayClass = `day current ${item.dayClass}`;
                  item2.oriDayClass = item.dayClass;
                }
              } */
              break;
            }
          }
          break;
        }
      }
    }
  }

  /**
   * 日历组件内部使用的可选项对象
   */
  private calendarOption: CalenderModule.CalenderOptions;

  /**
   * 滑动日历时，月份切换
   */
  private monthDesc: string = "";

  /**
   * 多少个月日历
   */
  private monthCalender: CalenderModule.MonthCalender = new CalenderModule.MonthCalender();

  /**
   * 天的swiper对象
   */
  private daySwiper: any;

  /**
   * 日历组件swiper options
   */
  private daySwiperOption: any = {
    loop: false,
    slidesPerView: 1,
    initialSlide: 1,
    observer: true,
    observeParents: true
  }

  /**
   * 选择日历某天的相关记录数据实体
   */
  private calenderChoosedModel: CalenderModule.CalenderChoosed = new CalenderModule.CalenderChoosed();

  /**
   * 用于记录日历月份的数据，判断到底是否应该生成新的日历
   */
  private daySwiperIncludes: Array<string> = new Array<string>();

  /**
   * 滑动日历组件的日期
   */
  private swiperMonthDate = null;


  /**
   * 渲染日历视图
   * @param {Date} date 日期对象
   * @param {boolean} isRight 是否往右边增加一个月份的日历，true为往右边增加，false为往左边增加，默认为true
   * @param {boolean} isSwiper 是否为滑动渲染的日历
   */
  private renderCalenderView(date: Date, isRight: boolean = true, isSwiper = false): void {
    let year = date.getFullYear();
    let month: number = date.getMonth();
    let days: number = 0;
    //判断闰年跟平年
    if ((month + 1) == 2 && Utils.isLeapYear(date)) {
      this.monthDays[2] = 29;
    } else {
      this.monthDays[2] = 28;
    }
    //该月总共拥有多少天
    days = this.monthDays[month + 1];
    let index: number = 0;
    //设置每月第一天时间对象
    let beginDate: Date = new Date(year, month, 1);
    if (isSwiper) this.swiperMonthDate = new Date(year, month, 1);
    else this.swiperMonthDate = null;
    this.daySwiperIncludes.push(Utils.dateFormat("yyyy-MM-dd", beginDate));
    let dayList: CalenderModule.DayList = new CalenderModule.DayList();
    //当前月精确到每月的第一天yyyy-MM-dd
    dayList.currentMonth = Utils.dateFormat("yyyy-MM-dd", beginDate);
    //当前月精确到月yyyy-MM
    dayList.month = Utils.dateFormat("yyyy-MM", beginDate);
    //当前日期
    let today: string = this.today;
    //默认日期
    let defaultDay: string = null;
    if (this.calendarOption.currentDate)
      defaultDay = Utils.dateFormat("yyyy-MM-dd", this.calendarOption.currentDate);

    //判断每月第一天是不是周日
    if (beginDate.getDay() == 0) {
      let dayModel: CalenderModule.DayModel = new CalenderModule.DayModel();
      dayModel.currentDay = Utils.dateFormat("yyyy-MM-dd", beginDate);
      dayModel.day = beginDate.getDate();
      dayModel.dayDesc = beginDate.getDate().toString();
      dayModel.oriDayDesc = dayModel.dayDesc;
      if (today == dayModel.currentDay && defaultDay == today) {
        dayModel.dayDesc = "今";
        dayModel.oriDayDesc = dayModel.dayDesc;
        dayModel.dayClass = "day current";
        dayModel.oriDayClass = "day no-today";
      } else if (today == dayModel.currentDay && defaultDay != today) {
        dayModel.dayDesc = "今";
        dayModel.oriDayDesc = dayModel.dayDesc;
        dayModel.dayClass = "day no-today";
        dayModel.oriDayClass = "day no-today";
      } else if (defaultDay == dayModel.currentDay) {
        dayModel.dayClass = "day current";
      }
      dayList.dayList.push(dayModel);
      index++;
    } else {
      //把第一天前一直到周末的天数补齐
      let diffDays: number = beginDate.getDay() - 0;
      for (let i = 0; i < diffDays; i++) {
        let dayModel: CalenderModule.DayModel = new CalenderModule.DayModel();
        dayList.dayList.push(dayModel);
      }
    }
    //循环生成第二天以及以后天数的数据
    for (let i = index + 1; i <= days; i++) {
      let dayModel: CalenderModule.DayModel = new CalenderModule.DayModel();
      let tempDate: Date = Utils.copyDate(beginDate);
      tempDate.setDate(i);
      dayModel.currentDay = Utils.dateFormat("yyyy-MM-dd", tempDate);
      dayModel.day = tempDate.getDate();
      dayModel.dayDesc = tempDate.getDate().toString();
      dayModel.oriDayDesc = dayModel.dayDesc;
      if (today == dayModel.currentDay && defaultDay == today) {
        dayModel.dayDesc = "今";
        dayModel.oriDayDesc = dayModel.dayDesc;
        dayModel.dayClass = "day current";
        dayModel.oriDayClass = "day no-today";
      } else if (today == dayModel.currentDay && defaultDay != today) {
        dayModel.dayDesc = "今";
        dayModel.oriDayDesc = dayModel.dayDesc;
        dayModel.dayClass = "day no-today";
        dayModel.oriDayClass = "day no-today";
      } else if (defaultDay == dayModel.currentDay) {
        dayModel.dayClass = "day current";
      }

      dayList.dayList.push(dayModel);
    }
    if (isRight)
      this.monthCalender.monthCalenderList.push(dayList);
    else {
      this.monthCalender.monthCalenderList.unshift(dayList);
    }
  }

  /**
   * 初始化日历组件
   * @param initCalenderData 初始化组件的需要的数据
   */
  initialCalender(initCalenderData: any): void {
    // @ts-ignore
    this.$refs.calenderDayWrapper.style.opacity = "";
    // @ts-ignore
    this.$refs.calenderDayWrapper.style.top = "";
    //重置原来渲染的所有数据
    this.daySwiperIncludes = new Array<string>();
    //清空原来的日历数据
    this.monthCalender = new CalenderModule.MonthCalender();
    //清空选择项
    this.calenderChoosedModel = new CalenderModule.CalenderChoosed();
    //清空options
    this.calendarOpts = null;
    this.calendarOption = null;
    //重置daySwiper的索引
    this.daySwiper.activeIndex = 1;
    this.daySwiper.realIndex = 1;

    let calendarOption: CalenderModule.CalenderOptions = new CalenderModule.CalenderOptions();
    calendarOption.beginDate = Utils.createCorrectDate(initCalenderData.beginDate);

    calendarOption.endDate = Utils.createCorrectDate(initCalenderData.endDate);

    calendarOption.currentDate = Utils.createCorrectDate(initCalenderData.currentDate);
    calendarOption.isAjax = <boolean>initCalenderData.isAjax;
    //初始化日历可选项
    this.calendarOption = calendarOption;
    this.initCalender(calendarOption);
  }

  /**
   * 折叠日历组件的容器
   */
  collapseCalenderWrapper(): void {
    let _base = this;
    this.calenderWrapperStyle.transform = `translateY(${(this.dayEleOffsetTop) * -1}px)`;
    this.calenderWrapperStyle["-webkit-transform"] = `translateY(${(this.dayEleOffsetTop) * -1}px,-1px)`;
    //折叠完成，通知组件调用者
    this.collapseOffset(this.dayEleOffsetTop, true, this.dayEleHeight, this.dayEleOffsetTop, this.dayEleboundTop, this.calenderWrapperEleOffsetTop);
  }

  /**
   * 注册相关事件，比如swiper相关滑动事件
   */
  mounted() {
    const _this = this;
    this.registerEvents();

    // @ts-ignore
    this.dayItemContainerOffsetTop.monthHeight = this.$refs.calenderMonthWrapper.offsetHeight;
    // @ts-ignore
    this.dayItemContainerOffsetTop.weekHeight = this.$refs.calenderWeek.offsetHeight;
  }

  /**
   * 监听日历组件折叠发方向，top或者bottom
   * @param newVal 变化的值
   * @param oldVal 旧的值
   */
  @Watch("direction")
  watchCollapseDirectionChange(newVal, oldVal): void {
    if (newVal == "top") {
      this.collapseCalenderWrapper();
    } else {
      //this.initialCalender(this.calendarOpts)
    }
  }

  /**
   * 注册相关事件
   */
  registerEvents(): void {
    let _this = this;
    this.$parent.$on("initialCalenderEvent", function (initCalenderData) {
      _this.calendarOpts = initCalenderData;
      _this.initialCalender(initCalenderData)
    });

    this.$parent.$on("initialCalenderStatusEvent", function (calenderDayStatus) {
      _this.calenderDayStatusExchange(calenderDayStatus)
    });

    //往右边切换天容器，生成slider块
    this.daySwiper.on("slideNextTransitionEnd", function () {
      let currentMonthDateStr = this.slides.eq(this.activeIndex).attr("data-month");
      //重置前一个月的状态
      let prevMonthDate = Utils.createCorrectDate(currentMonthDateStr);
      prevMonthDate.setMonth(prevMonthDate.getMonth() - 1, 1);
      let currentMonth = Utils.dateFormat("yyyy-MM-dd", prevMonthDate);

      for (let item of _this.monthCalender.monthCalenderList) {
        if (item.currentMonth == currentMonth) {
          for (let item1 of item.dayList) {
            item1.status = item1.oriStatus;
            item1.bgColor = item1.oriBgColor;
            item1.dayDesc = item1.oriDayDesc;
            item1.fontColor = item1.oriFontColor;
            item1.dayClass = item1.oriDayClass;
          }
          break;
        }
      }

      /*******************提前渲染下一个月的日历 begin*****************/
      let currentDate: Date = Utils.createCorrectDate(currentMonthDateStr);
      let endDate: Date = _this.calendarOption.endDate;
      endDate.setDate(1);
      _this.calenderChoosedModel.currentDate = Utils.dateFormat("yyyy-MM-dd", currentDate);
      if (currentDate < endDate) {
        currentDate.setMonth(currentDate.getMonth() + 1, 1);
        let dateStr = Utils.dateFormat("yyyy-MM-dd", currentDate);
        if (!_this.daySwiperIncludes.includes(dateStr)) {
          _this.renderCalenderView(currentDate, true, true);
          //_this.daySwiperIncludes.push(dateStr);

          _this.swipeSlideHandle(currentDate, true);
        }
        currentDate = Utils.createCorrectDate(currentMonthDateStr);
        _this.monthDesc = Utils.dateFormat("yyyy年M月", currentDate);
      } else {
        currentDate.setMonth(currentDate.getMonth(), 1);
        _this.monthDesc = Utils.dateFormat("yyyy年M月", currentDate);
      }
      /*******************提前渲染下一个月的日历 end*****************/

      //默认每个月第一天为选中状态
      currentDate = Utils.createCorrectDate(currentMonthDateStr);
      currentDate.setDate(1);
      currentMonth = Utils.dateFormat("yyyy-MM-dd", currentDate);

      for (let item of _this.monthCalender.monthCalenderList) {
        if (item.currentMonth == currentMonth) {
          if (currentMonth == _this.todayMonth) {//跟今天日期所在月份一致
            for (let item1 of item.dayList) {
              if (item1.currentDay == _this.today) {
                item1.dayClass = "day current";
                _this.chooseDayHandle(item1, item.month, item.currentMonth, null);
                //break;
              } else {
                item1.status = item1.oriStatus;
                item1.dayDesc = item1.oriDayDesc;
                item1.dayClass = item1.oriDayClass;
              }
            }
          } else {
            for (let item1 of item.dayList) {
              if (item1.day == 1) {
                let regExp = /[\u4E00-\u9FA5]/g;
                if (regExp.test(item1.dayDesc) && item1.dayDesc.length == 2) {
                  item1.dayDesc = item1.dayDesc.substring(0, 1);
                }
                item1.dayClass = "day current";
                _this.chooseDayHandle(item1, item.month, item.currentMonth, null);
                //break;
              } else {
                item1.status = item1.oriStatus;
                item1.dayDesc = item1.oriDayDesc;
                item1.dayClass = item1.oriDayClass;
              }
            }
          }
          break;
        }
      }
    });
    //往左边切换天容器，生成slider块
    this.daySwiper.on("slidePrevTransitionEnd", function () {
      let currentMonthDateStr = this.slides.eq(this.activeIndex).attr("data-month");

      //重置前一个月的状态
      let prevMonthDate = Utils.createCorrectDate(currentMonthDateStr);
      prevMonthDate.setMonth(prevMonthDate.getMonth() + 1);
      let currentMonth = Utils.dateFormat("yyyy-MM-dd", prevMonthDate);

      for (let item of _this.monthCalender.monthCalenderList) {
        if (item.currentMonth == currentMonth) {
          for (let item1 of item.dayList) {
            item1.status = item1.oriStatus;
            item1.bgColor = item1.oriBgColor;
            item1.dayDesc = item1.oriDayDesc;
            item1.fontColor = item1.oriFontColor;
            item1.dayClass = item1.oriDayClass;
          }
          break;
        }
      }

      /*******************提前渲染上一个月的日历 begin*****************/
      let currentDate: Date = Utils.createCorrectDate(currentMonthDateStr);
      let beginDate: Date = _this.calendarOption.beginDate;
      beginDate.setDate(1);
      _this.calenderChoosedModel.currentDate = Utils.dateFormat("yyyy-MM-dd", currentDate);
      if (currentDate > beginDate) {
        currentDate.setMonth(currentDate.getMonth() - 1, 1);
        let dateStr = Utils.dateFormat("yyyy-MM-dd", currentDate);
        if (!_this.daySwiperIncludes.includes(dateStr)) {
          _this.renderCalenderView(currentDate, false, true);
          //_this.daySwiperIncludes.push(dateStr);

          this.activeIndex = this.activeIndex + 1;
          this.realIndex = this.realIndex + 1;
          _this.swipeSlideHandle(currentDate, false);
        }
        currentDate = Utils.createCorrectDate(currentMonthDateStr);
        //currentDate.setMonth(currentDate.getMonth() + 1);
        _this.monthDesc = Utils.dateFormat("yyyy年M月", currentDate);
      } else {
        currentDate.setMonth(currentDate.getMonth(), 1);
        _this.monthDesc = Utils.dateFormat("yyyy年M月", currentDate);
      }
      /*******************提前渲染上一个月的日历 end*****************/

      //默认每个月第一天为选中状态
      currentDate = Utils.createCorrectDate(currentMonthDateStr);
      currentDate.setDate(1);
      currentMonth = Utils.dateFormat("yyyy-MM-dd", currentDate);

      for (let item of _this.monthCalender.monthCalenderList) {
        if (item.currentMonth == currentMonth) {
          if (currentMonth == _this.todayMonth) {
            for (let item1 of item.dayList) {
              if (item1.currentDay == _this.today) {
                item1.dayClass = "day current";
                _this.chooseDayHandle(item1, item.month, item.currentMonth, null);
                //break;
              } else {
                item1.status = item1.oriStatus;
                item1.dayDesc = item1.oriDayDesc;
                item1.dayClass = item1.oriDayClass;
              }
            }
          } else {
            for (let item1 of item.dayList) {
              if (item1.day == 1) {
                let regExp = /[\u4E00-\u9FA5]/g;
                if (regExp.test(item1.dayDesc) && item1.dayDesc.length == 2) {
                  item1.dayDesc = item1.dayDesc.substring(0, 1);
                }
                item1.dayClass = "day current";
                _this.chooseDayHandle(item1, item.month, item.currentMonth, null);
                //break;
              } else {
                item1.status = item1.oriStatus;
                item1.dayDesc = item1.oriDayDesc;
                item1.dayClass = item1.oriDayClass;
              }
            }
          }
          break;
        }
      }
    });
  }

  /**
   * 初始化日历视图数据 初始化渲染三个月的日历，当前月，上一个月，下一个月
   * @param  {CalenderModule.CalenderOptions} calenderOption 日历初始化选项
   */
  initCalender(calendarOption: CalenderModule.CalenderOptions): void {
    //初始化日历选择操作的实体
    this.calenderChoosedModel.beginDate = Utils.dateFormat("yyyy-MM-dd", calendarOption.beginDate);
    this.calenderChoosedModel.endDate = Utils.dateFormat("yyyy-MM-dd", calendarOption.endDate);
    this.calenderChoosedModel.currentDate = Utils.dateFormat("yyyy-MM-dd", calendarOption.currentDate);

    let currentDate: Date = Utils.copyDate(calendarOption.currentDate);
    let currentMonth = currentDate.getMonth();

    //渲染上一个月
    let tempDate: Date = Utils.copyDate(calendarOption.currentDate);
    tempDate.setMonth(currentMonth - 1, 1);
    if (tempDate >= calendarOption.beginDate) {
      this.renderCalenderView(tempDate);
      //this.daySwiperIncludes.push(Utils.dateFormat("yyyy-MM-dd", tempDate));
    }
    //渲染当前月
    this.renderCalenderView(currentDate);
    this.monthDesc = Utils.dateFormat("yyyy年M月", currentDate);
    //this.daySwiperIncludes.push(Utils.dateFormat("yyyy-MM-dd", currentDate));
    this.calenderChoosedModel.currentDate = Utils.dateFormat("yyyy-MM-dd", calendarOption.currentDate);

    //渲染下一个月
    tempDate = Utils.copyDate(calendarOption.currentDate);
    tempDate.setMonth(currentMonth + 1, 1);
    if (tempDate <= calendarOption.endDate) {
      this.renderCalenderView(tempDate);
      //this.daySwiperIncludes.push(Utils.dateFormat("yyyy-MM-dd", tempDate));
    }

    //判断是最小日期还是最大日期，最小日期swiper的activeIndex设置为0，最大日期则为1
    if (this.monthCalender.monthCalenderList.length == 2) {
      if (this.monthCalender.monthCalenderList[0].currentMonth == Utils.dateFormat("yyyy-MM-dd", calendarOption.beginDate)) {
        this.daySwiper.activeIndex = 0;
        this.daySwiper.realIndex = 0;
      } else {
        this.daySwiper.activeIndex = 1;
        this.daySwiper.realIndex = 1;
      }
    }
  }

  /**
   * 重新绘制组件calender组件
   * @param yearData 年数据对象
   * @param monthData 月数据对象
   * @param dayData 天数据对象
   * @param hourData 小时数据对象
   * @param minuteData 分数据对象
   * @param secondData 秒数据对象
   */
  resetCalender(yearData: any, monthData: any, dayData: any, hourData: any, minuteData: any, secondData: any) {
    let nowDate = new Date();
    let year = yearData && yearData.id || nowDate.getFullYear();
    let month = monthData.id || nowDate.getMonth() + 1;
    let day = dayData && dayData.id || 1;
    let hour = hourData && hourData.id || 0;
    let minute = minuteData && minuteData.id || 0;
    let second = secondData && secondData.id || 0;
    if (!this.calendarOption.isAjax) {
      //重置原来渲染的所有数据
      this.daySwiperIncludes = new Array<string>();
      //清空原来的日历数据
      this.monthCalender = new CalenderModule.MonthCalender();
      //清空选择项
      this.calenderChoosedModel = new CalenderModule.CalenderChoosed();
      //重新绘制日历
      this.calendarOption.currentDate = new Date(year, month - 1, day, hour, minute, second);
      this.initCalender(this.calendarOption);
    } else {
      //通知父组件重置日历组件的数据
      this.refurbishCalender(new Date(year, month - 1, day, hour, minute, second));
    }
  }

  /**
   * iosselect组件初始化可选项
   */
  private iosSelectOpts: any = {
    config: {

    },
    initDate: {
      currentDate: "",
      beginDate: "",
      endDate: "",
      day: "",
      dayType: ""
    }
  };

  /**
   * 下拉展开月份
   */
  collapseMonth(): void {
    let calenderChoosedModel: CalenderModule.CalenderChoosed = new CalenderModule.CalenderChoosed();
    this.iosSelectOpts.initDate.currentDate = this.calenderChoosedModel.currentDate;
    this.iosSelectOpts.initDate.beginDate = this.calenderChoosedModel.beginDate;
    this.iosSelectOpts.initDate.endDate = this.calenderChoosedModel.endDate;
    this.iosSelectOpts.initDate.day = this.calenderChoosedModel.day;
    this.iosSelectOpts.initDate.dayType = this.calenderChoosedModel.dayType;
  }


  /**
   * 重置日历控件
   */
  @Emit("refurbishCalenderEvent")
  private refurbishCalender(ChooseDate: Date): void {

  }

  /**
   * 日历组件折叠的距离通知方法
   * @param offsetTop 折叠距离
   * @param isComplete 是否折叠完成，true为日历组件折叠完成
   * @param dayEleHeight 日期元素本身高度
   * @param dayEleOffsetTop 日期元素距离父容器距离
   * @param calendarWrapperOffsetTop 日历容器距离父容器距离
   */
  @Emit("collapseOffsetEvent")
  collapseOffset(offsetTop: number, isComplete: boolean, dayEleHeight: number = 0, dayEleOffsetTop: number = 0, calendarWrapperOffsetTop: number = 0, dayEleboundTop: number = 0): void {

  }

  /**
   * 日历组件滑动的时候通知事件，让组件调用者重置日历状态
   * @param date 日期
   * @param isNext true表示初始化下下个月日期，false表示初始化上上个月日期
   */
  @Emit("swipeCalenderSlideEvent")
  swipeSlideHandle(date: Date, isNext: boolean = true) {

  }

  /**
   * 选择具体的日期
   * @param dayItem 当前点击的日期
   * @param month 当前月份，精确到月，如:2017-08
   * @param currentMonth 当前月份，精确到每月第一天：2018-01-01
   * @param event 点击事件
   */
  @Emit("chooseDayItemEvent")
  private chooseDayHandle(dayItem: any, month: string, currentMonth: string, event: any): any {
    if (!event) return true;
    if (!dayItem.dayDesc && dayItem.dayClass == "day") return true;
    let _this = this;
    //点击当前元素，获取当前元素的offset、当前元素的height，日历容器的offset
    // @ts-ignore
    if (event.target.tagName.toLowerCase() == "span") {
      _this.dayEleOffsetTop = event.target.parentNode.offsetTop;
      _this.dayEleboundTop = event.target.parentNode.getBoundingClientRect().top;
      _this.dayEleHeight = event.target.parentNode.offsetHeight;
    } else {
      _this.dayEleOffsetTop = event.target.offsetTop;
      _this.dayEleboundTop = event.target.getBoundingClientRect().top;
      _this.dayEleHeight = event.target.offsetHeight;
    }

    //折叠日历组件
    //this.collapseCalenderWrapper();

    for (let item of this.monthCalender.monthCalenderList) {
      if (item.currentMonth == currentMonth) {//找到当前月
        for (let item1 of item.dayList) {
          if (item1.currentDay != dayItem.currentDay) {
            item1.status = item1.oriStatus;
            item1.dayDesc = item1.oriDayDesc;
            item1.dayClass = item1.oriDayClass;
          } else {
            if (_this.today == item1.currentDay) {
              item1.dayClass = "day current";
              item1.dayDesc = "今";
              item1.oriDayDesc = item1.dayDesc;
            } else {
              let regExp = /[\u4E00-\u9FA5]/g;
              if (regExp.test(item1.dayDesc) && item1.dayDesc.length == 2) {
                item1.dayDesc = item1.dayDesc.substring(0, 1);
              }
              item1.dayClass = `day current ${item1.oriDayClass}`;
            }
          }
        }
        break;
      }
    }
  }
}